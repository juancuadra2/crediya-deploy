# ==========================================
# BASES DE DATOS
# ==========================================

services:
  
  postgres-crediya:
    image: postgres:17
    container_name: postgres-crediya
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${POSTGRES_USER:-crediya_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-crediya_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Environment variables for both databases (para referencia)
      POSTGRES_AUTH_DB: ${POSTGRES_AUTH_DB:-crediya_auth}
      POSTGRES_REQUESTS_DB: ${POSTGRES_REQUESTS_DB:-crediya_requests}
    command: |
      postgres 
      -c wal_level=logical 
      -c max_wal_senders=3 
      -c max_replication_slots=3
      -c shared_buffers=256MB
      -c effective_cache_size=512MB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c max_connections=100
    ports:
      - "5432:5432"
    volumes:
      - postgres_crediya_data:/var/lib/postgresql/data
      - ./configs/postgres/init-crediya-unified-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 384M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crediya_user} -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================
  # KAFKA ECOSYSTEM
  # ==========================================

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CLUSTER_ID: "3d9a5a62-26f8-4d9e-a4d7-7b7d6f229f2a"
      CLUSTER_ID: "uO3fZ4e8Qf2yWfR0a2smkg"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # JVM Memory optimizations
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms256m"
      KAFKA_LOG4J_OPTS: "-Dlog4j.configuration=file:/opt/kafka/config/log4j.properties"
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 384M
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================
  # DEBEZIUM PARA CDC (CHANGE DATA CAPTURE)
  # ==========================================
  
  kafka-connect:
    image: debezium/connect:2.7.3.Final
    container_name: kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
      postgres-crediya:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      # Variables para la configuraci√≥n del conector
      DB_HOST: postgres-crediya
      DB_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-crediya_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-crediya_password}
      POSTGRES_AUTH_DB: ${POSTGRES_AUTH_DB:-crediya_auth}
      DEBEZIUM_TOPIC_PREFIX: ${DEBEZIUM_TOPIC_PREFIX:-crediya.auth}
      # JVM Memory optimizations for Debezium
      KAFKA_HEAP_OPTS: "-Xmx384m -Xms192m"
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35"
    volumes:
      - ./configs/debezium:/configs
    command: ["/configs/init-connector.sh", "configure"]
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================
  # MICROSERVICIOS
  # ==========================================
  
  crediya-ms-auth:
    build:
      context: ./micros/crediya-ms-auth
      dockerfile: deployment/Dockerfile
    container_name: crediya-ms-auth
    depends_on:
      postgres-crediya:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: ${AUTH_SERVICE_PORT:-8080}
      # Database configuration
      DB_HOST: postgres-crediya
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_AUTH_DB:-crediya_auth}
      DB_USERNAME: ${POSTGRES_USER:-crediya_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-crediya_password}
      # Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: 3600000
      # JVM Memory optimizations
      JAVA_OPTS: "-Xmx384m -Xms192m -XX:+UseG1GC -XX:+UseStringDeduplication"
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  crediya-ms-requests:
    build:
      context: ./micros/crediya-ms-requests
      dockerfile: deployment/Dockerfile
    container_name: crediya-ms-requests
    depends_on:
      postgres-crediya:
        condition: service_healthy
      kafka:
        condition: service_healthy
      crediya-ms-auth:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: ${REQUESTS_SERVICE_PORT:-8081}
      # Database configuration
      DB_HOST: postgres-crediya
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_REQUESTS_DB:-crediya_requests}
      DB_USERNAME: ${POSTGRES_USER:-crediya_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-crediya_password}
      # Kafka configuration
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-kafka:29092}
      KAFKA_GROUP_ID: CrediYaMsRequests-docker
      # Debezium topic configuration
      DEBEZIUM_TOPIC_PREFIX: ${DEBEZIUM_TOPIC_PREFIX:-crediya.auth}
      # Security
      JWT_SECRET: ${JWT_SECRET}
      # External services
      USERS_SERVICE_URL: http://crediya-ms-auth:8080
      # AWS Configuration
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      # JVM Memory optimizations
      JAVA_OPTS: "-Xmx384m -Xms192m -XX:+UseG1GC -XX:+UseStringDeduplication"
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_crediya_data: